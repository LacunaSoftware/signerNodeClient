/**
 * Dropsigner
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentCanceled</strong></td>     <td>Triggered when the document is canceled.</td>     <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentsCreated (v1.50.0)</strong></td>     <td>Triggered when one or more documents are created.</td>     <td><a href=\"#model-Webhooks.DocumentsCreatedModel\">Webhooks.DocumentsCreatedModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>
 *
 * OpenAPI spec version: 1.55.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CertificateHolderTypes } from './certificate-holder-types';
import { CertificateTypes } from './certificate-types';
import { DocumentMarkPrePositionedDocumentMarkModel } from './document-mark-pre-positioned-document-mark-model';
import { FlowActionType } from './flow-action-type';
import { FlowActionsXadesOptionsModel } from './flow-actions-xades-options-model';
import { SignatureInitialsModes } from './signature-initials-modes';
import { UsersParticipantUserModel } from './users-participant-user-model';
/**
 *
 * @export
 * @interface FlowActionsFlowActionCreateModel
 */
export interface FlowActionsFlowActionCreateModel {
    /**
     *
     * @type {FlowActionType}
     * @memberof FlowActionsFlowActionCreateModel
     */
    type?: FlowActionType;
    /**
     * The order in which this action should take place.
     * @type {number}
     * @memberof FlowActionsFlowActionCreateModel
     */
    step?: number;
    /**
     *
     * @type {UsersParticipantUserModel}
     * @memberof FlowActionsFlowActionCreateModel
     */
    user?: UsersParticipantUserModel;
    /**
     * Number of required signatures (if type is SignRule)
     * @type {number}
     * @memberof FlowActionsFlowActionCreateModel
     */
    numberRequiredSignatures?: number | null;
    /**
     * Name of the rule (if type is SignRule)
     * @type {string}
     * @memberof FlowActionsFlowActionCreateModel
     */
    ruleName?: string | null;
    /**
     * If true and the action is a Sign Rule, allows the document flow to continue while there are enough users that can fulfill the rule.
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    allowRuleFlowToContinueIfRefused?: boolean | null;
    /**
     * Title of the participant
     * @type {string}
     * @memberof FlowActionsFlowActionCreateModel
     */
    title?: string | null;
    /**
     *
     * @type {Array<UsersParticipantUserModel>}
     * @memberof FlowActionsFlowActionCreateModel
     */
    signRuleUsers?: Array<UsersParticipantUserModel> | null;
    /**
     *
     * @type {Array<DocumentMarkPrePositionedDocumentMarkModel>}
     * @memberof FlowActionsFlowActionCreateModel
     */
    prePositionedMarks?: Array<DocumentMarkPrePositionedDocumentMarkModel> | null;
    /**
     * Set to true if the electronic signature option should be available. (only if the type of the action is Signer or SignRule)
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    allowElectronicSignature?: boolean | null;
    /**
     * Requires the user to confirm a code sent to his phone to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requireSmsAuthenticationToSignElectronically?: boolean | null;
    /**
     * Requires the user to enter a one-time password (OTP) to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requireAuthenticatorAppToSignElectronically?: boolean | null;
    /**
     * Requires the user to take a selfie to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requireSelfieAuthenticationToSignElectronically?: boolean | null;
    /**
     * Requires the user to take a selfie to sign electronically. This selfie will be validated by SERPRO's Datavalid. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requireDatavalidAuthenticationToSignElectronically?: boolean | null;
    /**
     * Requires the user to pay a Pix to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requirePixAuthenticationToSignElectronically?: boolean | null;
    /**
     *
     * @type {CertificateTypes}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requiredCertificateTypeToSign?: CertificateTypes;
    /**
     * [DEPRECATED] Requires the user to sign the document with a company certificate (e.g. e-CNPJ). Please use Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.RequiredCertificateHolderTypeToSign instead.
     * @type {boolean}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requireCompanyCertificate?: boolean | null;
    /**
     * Requires the user to sign the document with a company certificate (e.g. e-CNPJ) that has the provided company identifier.
     * @type {string}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requiredCompanyIdentifier?: string | null;
    /**
     *
     * @type {CertificateHolderTypes}
     * @memberof FlowActionsFlowActionCreateModel
     */
    requiredCertificateHolderTypeToSign?: CertificateHolderTypes;
    /**
     *
     * @type {FlowActionsXadesOptionsModel}
     * @memberof FlowActionsFlowActionCreateModel
     */
    xadesOptions?: FlowActionsXadesOptionsModel;
    /**
     *
     * @type {SignatureInitialsModes}
     * @memberof FlowActionsFlowActionCreateModel
     */
    signatureInitialsMode?: SignatureInitialsModes;
}
